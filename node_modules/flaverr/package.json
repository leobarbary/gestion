{
  "_args": [
    [
      {
        "raw": "flaverr@^1.0.0",
        "scope": null,
        "escapedName": "flaverr",
        "name": "flaverr",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "/Users/fthetis/Documents/2017.4/Project_ymple/ymple-commerce/node_modules/sails"
    ]
  ],
  "_from": "flaverr@>=1.0.0 <2.0.0",
  "_id": "flaverr@1.2.2",
  "_inCache": true,
  "_location": "/flaverr",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/flaverr-1.2.2.tgz_1495061240373_0.05451071448624134"
  },
  "_npmUser": {
    "name": "mikermcneil",
    "email": "npm@sailsjs.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flaverr@^1.0.0",
    "scope": null,
    "escapedName": "flaverr",
    "name": "flaverr",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sails"
  ],
  "_resolved": "https://registry.npmjs.org/flaverr/-/flaverr-1.2.2.tgz",
  "_shasum": "25f8b0a12f004aeda3bd1ed8aa6025d7dce72057",
  "_shrinkwrap": null,
  "_spec": "flaverr@^1.0.0",
  "_where": "/Users/fthetis/Documents/2017.4/Project_ymple/ymple-commerce/node_modules/sails",
  "author": {
    "name": "Mike McNeil"
  },
  "bugs": {
    "url": "https://github.com/mikermcneil/flaverr/issues"
  },
  "dependencies": {
    "@sailshq/lodash": "^3.10.2"
  },
  "description": "Flavor an Error instance with the specified error code string or dictionary of customizations.",
  "devDependencies": {
    "eslint": "3.5.0"
  },
  "directories": {},
  "dist": {
    "shasum": "25f8b0a12f004aeda3bd1ed8aa6025d7dce72057",
    "tarball": "https://registry.npmjs.org/flaverr/-/flaverr-1.2.2.tgz"
  },
  "gitHead": "9f6144a0fc24148dc12bd2947f7d6ee85fa56c7d",
  "homepage": "https://github.com/mikermcneil/flaverr#readme",
  "keywords": [
    "error",
    "error-handling",
    "stack-trace",
    "error-codes"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mikermcneil",
      "email": "michael.r.mcneil@gmail.com"
    }
  ],
  "name": "flaverr",
  "optionalDependencies": {},
  "readme": "# flaverr\n\nFlavor an Error instance with the specified error code string or dictionary of customizations.\n\n\n## Installation &nbsp; [![NPM version](https://badge.fury.io/js/flaverr.svg)](http://badge.fury.io/js/flaverr)\n\n```bash\n$ npm install flaverr --save --save-exact\n```\n\n\n## Usage\n\n- If you provide a string as the first argument, that string will be set as the Error's `code`.\n- If you provide a dictionary as the first argument, that dictionary's keys will get folded into the Error as properties.\n\n\n#### Attach an error code\n\n```javascript\nvar flaverr = require('flaverr');\n\nvar err = flaverr('notFound', new Error('Could not find user with the specified id.'));\n// => assert(err.code === 'notFound' && err.message === 'Could not find user with the specified id.')\n// => assert(err.constructor.name === 'Error')\n```\n\n#### Attach arbitrary properties\n\n```javascript\nvar flaverr = require('flaverr');\n\nvar err = flaverr({\n  code: 'notFound',\n  output: { foo: 'bar' }\n}, new Error('Could not find user with the specified id.'));\n// => assert(err.code === 'notFound' && err.message === 'Could not find user with the specified id.')\n// => assert(err.constructor.name === 'Error')\n```\n\n\n## A few examples of common use cases\n\n#### Tagging an error with a code before sending it through an asynchronous callback\n\n```javascript\nif (err) { return done(err); }\nif (!user) {\n  return done(flaverr('notFound', new Error('Could not find a user with that id (`'+req.param('id')+'`).')));\n}\n```\n\n\n#### In a `try` statement\n\n```javascript\ntry {\n  _.each(paths, function (thisPath) {\n    var isDirectory = fs.statFileSync(path.resolve(thisPath)).isDirectory();\n    if (!isDirectory) {\n      throw flaverr('notADirectory', new Error('One of the provided paths (`'+path.resolve(thisPath)+'`) points to something other than a directory.'));\n    }\n  });\n} catch (e) {\n  switch (e.code) {\n    case 'ENOENT': return exits.notFound();\n    case 'notADirectory': return exits.invalidPath(e);\n    default: return exits.error(e);\n  }\n}\n```\n\n#### In an asynchronous loop\n\n```javascript\nasync.eachSeries(userRecords, function (user, next) {\n  \n  if (user.pets.length === 0) {\n    return next(flaverr('noPets', new Error('User (`'+user.id+'`) has no pets yet!')));\n  }\n\n  if (!user.hobby) {\n    return next(flaverr('noHobby', new Error('Consistency violation: User (`'+user.id+'`) has no hobby!')));\n  }\n\n  async.each(user.pets, function (pet, next){\n    Pet.update().where({ id: pet.id })\n    .set({ likelyHobby: user.hobby })\n    .exec(next);\n  }, function (err){\n    if (err) { return next(err); }\n    if (err.code === 'E_UNIQUE') { return next(flaverr('nonUniquePetHobby', err)); }\n    return next();\n  });\n\n}, function afterwards(err) {\n  if (err) {\n    switch (err.code) {\n      case 'noPets': return res.send(409, err.message);\n      case 'noHobby': return res.serverError(err);\n      case 'nonUniquePetHobby': return res.send(409, 'A pet already exists with that hobby.');\n      default: return res.serverError(err);\n    }\n  }//--•\n\n  return res.ok();\n});\n```\n\n\n\n## License\n\nMIT &copy; 2016 Mike McNeil\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/mikermcneil/flaverr.git"
  },
  "scripts": {
    "custom-tests": "echo \"(No other custom tests yet.)\" && echo # node ./node_modules/mocha/bin/mocha test --recursive",
    "lint": "node ./node_modules/eslint/bin/eslint . --max-warnings=0 && echo '✔  Your code looks good.'",
    "test": "npm run lint && npm run custom-tests"
  },
  "version": "1.2.2"
}
