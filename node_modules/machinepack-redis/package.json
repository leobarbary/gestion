{
  "_args": [
    [
      {
        "raw": "machinepack-redis@^1.1.1",
        "scope": null,
        "escapedName": "machinepack-redis",
        "name": "machinepack-redis",
        "rawSpec": "^1.1.1",
        "spec": ">=1.1.1 <2.0.0",
        "type": "range"
      },
      "/Users/fthetis/Documents/2017.4/Project_ymple/ymple-commerce-1.0/node_modules/sails"
    ]
  ],
  "_from": "machinepack-redis@>=1.1.1 <2.0.0",
  "_id": "machinepack-redis@1.3.0",
  "_inCache": true,
  "_location": "/machinepack-redis",
  "_nodeVersion": "4.4.7",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/machinepack-redis-1.3.0.tgz_1489192758680_0.7978356741368771"
  },
  "_npmUser": {
    "name": "sgress454",
    "email": "sgress454@treeline.io"
  },
  "_npmVersion": "2.15.8",
  "_phantomChildren": {
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "machinepack-redis@^1.1.1",
    "scope": null,
    "escapedName": "machinepack-redis",
    "name": "machinepack-redis",
    "rawSpec": "^1.1.1",
    "spec": ">=1.1.1 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/sails"
  ],
  "_resolved": "https://registry.npmjs.org/machinepack-redis/-/machinepack-redis-1.3.0.tgz",
  "_shasum": "79731150a26cf2b0b00b0eb7577ff268e5bf75b8",
  "_shrinkwrap": null,
  "_spec": "machinepack-redis@^1.1.1",
  "_where": "/Users/fthetis/Documents/2017.4/Project_ymple/ymple-commerce-1.0/node_modules/sails",
  "author": {
    "name": "The Sails Company"
  },
  "bugs": {
    "url": "https://github.com/treelinehq/machinepack-redis/issues"
  },
  "contributors": [
    {
      "name": "Luis Lobo Borobia",
      "email": "luislobo@gmail.com"
    }
  ],
  "dependencies": {
    "@sailshq/lodash": "^3.10.2",
    "async": "2.0.1",
    "flaverr": "^1.1.1",
    "machine": "^13.0.0-11",
    "redis": "2.6.3"
  },
  "description": "Structured Node.js bindings for Redis.",
  "devDependencies": {
    "eslint": "2.11.1",
    "istanbul": "0.4.5",
    "mocha": "3.0.2",
    "test-machinepack-mocha": "^0.2.2"
  },
  "directories": {},
  "dist": {
    "shasum": "79731150a26cf2b0b00b0eb7577ff268e5bf75b8",
    "tarball": "https://registry.npmjs.org/machinepack-redis/-/machinepack-redis-1.3.0.tgz"
  },
  "gitHead": "122b429be4212d6af665632096733ecf972dcd1e",
  "homepage": "https://github.com/treelinehq/machinepack-redis#readme",
  "keywords": [
    "Redis",
    "machines",
    "machinepack"
  ],
  "license": "MIT",
  "machinepack": {
    "friendlyName": "Redis",
    "machineDir": "machines/",
    "machines": [
      "create-manager",
      "destroy-manager",
      "get-connection",
      "create-connection-url",
      "release-connection",
      "get-cached-value",
      "cache-value",
      "destroy-cached-values"
    ],
    "implements": {
      "connectable": "1.0",
      "cache": "1.0-rc1"
    },
    "testsUrl": "https://travis-ci.org/treelinehq/machinepack-redis"
  },
  "maintainers": [
    {
      "name": "mikermcneil",
      "email": "michael.r.mcneil@gmail.com"
    },
    {
      "name": "particlebanana",
      "email": "particlebanana@gmail.com"
    },
    {
      "name": "sgress454",
      "email": "sgress454@treeline.io"
    }
  ],
  "name": "machinepack-redis",
  "optionalDependencies": {},
  "readme": "\n<h1>\n  <a href=\"http://node-machine.org\" title=\"Node-Machine public registry\"><img alt=\"node-machine logo\" title=\"Node-Machine Project\" src=\"http://node-machine.org/images/machine-anthropomorph-for-white-bg.png\" width=\"50\" /></a>\n  machinepack-redis\n</h1>\n\n### [Docs](http://node-machine.org/machinepack-redis) &nbsp; [Browse other machines](http://node-machine.org/machinepacks) &nbsp;  [FAQ](http://node-machine.org/implementing/FAQ)  &nbsp;  [Newsgroup](https://groups.google.com/forum/?hl=en#!forum/node-machine)\n\nStructured Node.js bindings for Redis.\n\n> This package contains relatively low-level functionality, and it is designed to provide building blocks for higher-level abstractions (e.g. an ORM like Waterline).\n\n\n## Installation &nbsp; [![NPM version](https://badge.fury.io/js/machinepack-redis.svg)](http://badge.fury.io/js/machinepack-redis) [![Build Status](https://travis-ci.org/treelinehq/machinepack-redis.svg?branch=master)](https://travis-ci.org/treelinehq/machinepack-redis)\n\n```sh\n$ npm install machinepack-redis --save\n```\n\n\n## Quick Start\n\nThe example below contains a ready-to-use function useful for obtaining one-off access to a Redis connection.\nUnder the covers, in the function's implementation, you can see how to manage the Redis connection lifecycle, as well as how to implement thorough, production-level (anal-retentive) error handling.\n\n```javascript\n\n/**\n * Module dependencies\n */\nvar Redis = require('machinepack-redis');\n\n\n/**\n * doSomeStuffWithRedis()\n *\n * An example of a helper function you might write using mp-redis.\n *\n * @required {String} connectionString\n *   Connection string to use when connecting to Redis.\n *\n * @optional {Function} during\n *   Lifecycle callback to run once the connection is active.  Receives connection as first arg, and standard Node cb as second.\n *   Expected to call `during` when finished (at which point the connection is released).\n *\n * @optional {Function} onUnexpectedFailure\n *   Notifier function to run each time an unexpected failure notice is received one way or the other.\n *   Receives relevant Error as 1st argument.\n */\nfunction doSomeStuffWithRedis(opts, done) {\n  if (opts.connectionString === undefined) { return done(new Error('`connectionString` is required.')); }\n  if (opts.during !== undefined & typeof opts.during !== 'function') {\n    return done(new Error('If provided, `during` must be a function.'));\n  }\n  if (opts.onUnexpectedFailure !== undefined & typeof opts.onUnexpectedFailure !== 'function') {\n    return done(new Error('If provided, `onUnexpectedFailure` must be a function.'));\n  }\n  \n  Redis.createManager({\n    connectionString: opts.connectionString,\n    onUnexpectedFailure: function (err){\n      // Use custom notifier function, if one was provided.\n      if (opts.onUnexpectedFailure) {\n        opts.onUnexpectedFailure(err);\n        return;\n      }\n      //--• Otherwise, do the default thing (log a warning)\n      console.warn('WARNING: Redis manager emitted a notice about an unexpected failure.  The redis server may have crashed, or become inaccessible.  Error details from Redis:', err);\n    }\n  }).exec(function (err, report){\n    if (err) {\n      return done(new Error('Could not create manager due to unexpected error: '+ err.stack));\n    }//--• No reason to proceed any further.\n    \n    var mgr = report.manager;\n    Redis.getConnection({\n      manager: mgr\n    }).exec(function (err, report){\n      if (err) {\n        return done(new Error('Could not get connection from manager, due to unexpected error: '+err.stack));\n      }//--• No reason to proceed any further.\n      \n      // Local var for convenience.\n      var connection = report.connection;\n      \n      \n      console.log('CONNECTED!');\n      \n      // Now do stuff w/ the connection\n      (opts.during||function noOp(connection, proceed){\n        return proceed();\n      })(report.connection, function afterwards (err_doingStuff) {\n        if (err_doingStuff) {\n          console.log('Unexpected error occurred while doing stuff with this Redis connection.  Details: '+err_doingStuff.stack);\n          console.log('Nonetheless, continuing on to release the connection and destroy the manager....');\n        }// >- continue on to attempt to release the connection and destroy the manager.\n        \n        // Always release the connection when finished:\n        Redis.releaseConnection({\n          connection: connection\n        }).exec({\n          error: function (err_releaseConnection){\n            console.warn(new Error('Could not release Redis connection due to unexpected error: '+err_releaseConnection.stack));\n            // ^^Note that we might want to also still attempt to destroy the manager here, even\n            // though we couldn't release the connection. (However, we don't mess w/ that in this example code.)\n            \n            if (err_doingStuff) { return done(err_doingStuff); }\n            else {\n              console.warn('Triggering success callback anyway, since everything else seemed to work ok...');\n              return done();\n            }\n          },\n          success: function (report){\n            console.log('Connection released.');\n  \n            // But ALWAYS destroy the connection manager when finished\n            Redis.destroyManager({manager: mgr}).exec(function (err_destroyMgr){\n              if (err_destroyMgr) {\n                console.warn(new Error('Could not destroy Redis connection manager due to unexpected error: '+ err_destroyMgr.stack));\n                \n                if (err_doingStuff) { return done(err_doingStuff); }\n                else {\n                  console.warn('Triggering success callback anyway, since everything else seemed to work ok...');\n                  return done();\n                }\n              }//--•\n              \n              console.log('Manager destroyed.');\n              \n              // Now, depending on whether we ran into an error above, finish up accordingly.\n              if (err_doingStuff) {\n                // Encountered an error along the way, but at least cleanup worked out ok!\n                return done(err_doingStuff);\n              }\n              else {\n                // Done.  No errors, and we cleaned up everything successfully!\n                return done();\n              }\n              \n            }); //</Redis.destroyManager>\n  \n          }//</on success :: Redis.releaseConnection()>\n        });//</Redis.releaseConnection()>\n      });//</during (do stuff while redis connection is active)>\n    }); //</Redis.getConnection>\n  }); //</Redis.createManager>\n}//</declare :: doSomeStuffWithRedis()>\n\n\n// Then e.g. you can do:\ndoSomeStuffWithRedis({\n  connectionString: 'redis://127.0.0.1:6379',\n  onUnexpectedFailure: function (err){ console.warn('uh oh, looks like our redis might have just gone down:',err); },\n  during: function (connection, proceed) {\n    \n    // Storing in key `stuff` value `things`\n    Redis.cacheValue({\n      connection: connection,\n      key: 'stuff',\n      value: 'things'\n    }).exec(function (err, report){\n      if (err) {\n        return proceed(new Error('Could not cache value, due to unexpected error.  Error details: '+err.stack));\n      }\n\n      console.log('stored `stuff` key with `things`');\n\n      // Get the cached value back\n      Redis.getCachedValue({\n        connection: connection,\n        key: 'stuff'\n      }).exec(function (err, report){\n        if (err) {\n          return proceed(new Error('Could not get cached value, due to unexpected error.  Error details:', err.stack));\n        }\n\n        console.log('stuff `key` contains `%s`', report.value);\n\n        // remove keys. Notice that keys is an array of keys to remove\n        Redis.destroyCachedValues({\n          connection: connection,\n          keys: ['stuff']\n        }).exec(function (err, report){\n          if (err) {\n            return proceed(new Error('Could not get destroy cached values, due to unexpected error.  Error details:', err.stack));\n          }\n\n          console.log('key `stuff` removed');\n\n          // Get the cached value back\n          Redis.getCachedValue({\n            connection: connection,\n            key: 'stuff'\n          }).exec({\n            error: function (err){\n              return proceed(new Error('Could not get cached value the 2nd time, due to unexpected error.  Error details:', err.stack));\n            },\n            notFound: function (){\n              console.log('As we expected, the `stuff` key was not found this time.  Good!');\n              return proceed();\n            },\n            success: function (){\n              return proceed(new Error('Consistency violation: Should not have been able to find `stuff` key the 2nd time!!!  Must be a bug in our code.'));\n            }\n          }); //</Redis.getCachedValue>\n\n        }); //</Redis.destroyCachedValues>\n      }); //</Redis.getCachedValue>\n    }); //</Redis.cacheValue>\n  }//</during>\n  \n}, function afterwards(err) {\n  if (err) {\n    console.log('Attempted to do some stuff with redis, but encountered an error along the way:',err.stack);\n    return;\n  }//--•\n  \n  console.log('Successfully did some stuff with Redis!');\n});\n```\n\n\n> ##### Setup instructions for the example above\n> \n> First, if your Redis server is not running yet, open a new terminal window and do:\n> ```bash\n> redis-server\n> ```\n> \n> Next, copy the example code below to a new `.js` file somewhere in your project (e.g. `examples/basic-usage.js`).\n> Then run:\n> ```bash\n> npm install machinepack-redis --save --save-exact\n> ```\n>\n>\n> Finally, run the example:\n> ```bash\n> node examples/basic-usage.js\n> ```\n\n\n\n## Usage\n\nFor the latest usage documentation, version information, and test status of this module, see <a href=\"http://node-machine.org/machinepack-redis\" title=\"Structured Node.js bindings for Redis. (for node.js)\">http://node-machine.org/machinepack-redis</a>.  The generated manpages for each machine contain a complete reference of all expected inputs, possible exit states, and example return values.  If you need more help, or find a bug, jump into [Gitter](https://gitter.im/node-machine/general) or leave a message in the project [newsgroup](https://groups.google.com/forum/?hl=en#!forum/node-machine).\n\n\n## About  &nbsp; [![Gitter](https://badges.gitter.im/Join Chat.svg)](https://gitter.im/node-machine/general?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis is a [machinepack](http://node-machine.org/machinepacks), an NPM module which exposes a set of related Node.js [machines](http://node-machine.org/spec/machine) according to the [machinepack specification](http://node-machine.org/spec/machinepack).\nDocumentation pages for the machines contained in this module (as well as all other NPM-hosted machines for Node.js) are automatically generated and kept up-to-date on the <a href=\"http://node-machine.org\" title=\"Public machine registry for Node.js\">public registry</a>.\nLearn more at <a href=\"http://node-machine.org/implementing/FAQ\" title=\"Machine Project FAQ (for implementors)\">http://node-machine.org/implementing/FAQ</a>.\n\n\n## License\n\nMIT &copy; 2015 contributors\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/treelinehq/machinepack-redis.git"
  },
  "scripts": {
    "coverage": "node ./node_modules/istanbul/lib/cli.js cover node_modules/mocha/bin/_mocha tests/*.js",
    "lint": "node ./node_modules/eslint/bin/eslint machines index.js",
    "posttest": "npm run lint",
    "test": "node ./node_modules/mocha/bin/mocha tests/*.js --timeout 5000 --slow 2000"
  },
  "version": "1.3.0"
}
